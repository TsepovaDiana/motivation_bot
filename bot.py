import json
import random
import logging
import os
import datetime  # –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∏–º–ø–æ—Ä—Ç
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
QUOTES_FILE = 'quotes.json'

def load_quotes():
    with open(QUOTES_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/quote - —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞\n"
        "/daily - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é\n"
        "/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ
    )

async def send_quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        quotes = load_quotes()
        quote = random.choice(quotes)
        await update.message.reply_text(f"‚≠êÔ∏è –í–∞—à–∞ —Ü–∏—Ç–∞—Ç–∞:\n\n{quote}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ü–∏—Ç–∞—Ç—ã: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–∏—Ç–∞—Ç")

async def daily_quote(context: ContextTypes.DEFAULT_TYPE):
    try:
        job = context.job
        quotes = load_quotes()
        quote = random.choice(quotes)
        await context.bot.send_message(job.chat_id, text=f"üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞—à–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è:\n\n{quote}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ daily_quote: {e}")

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_id = update.message.chat_id
        context.job_queue.run_daily(
            daily_quote,
            time=datetime.time(hour=7, minute=30),
            chat_id=chat_id,
            name=str(chat_id))
        await update.message.reply_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –≤ 7:30 —É—Ç—Ä–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")

async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_id = update.message.chat_id
        current_jobs = context.job_queue.get_jobs_by_name(str(chat_id))
        if not current_jobs:
            await update.message.reply_text("‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
            return
            
        for job in current_jobs:
            job.schedule_removal()
        await update.message.reply_text("üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è")

def main():
    try:
        application = Application.builder().token(TOKEN).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("quote", send_quote))
        application.add_handler(CommandHandler("daily", subscribe))
        application.add_handler(CommandHandler("unsubscribe", unsubscribe))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
