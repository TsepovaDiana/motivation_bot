import json
import random
import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Updater, 
    CommandHandler, 
    CallbackContext,
    MessageHandler,
    filters
)
from dotenv import load_dotenv
import pytz
from datetime import time

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
QUOTES_FILE = 'quotes.json'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–∏—Ç–∞—Ç
def load_quotes():
    with open(QUOTES_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_keyboard():
    return ReplyKeyboardMarkup(
        [
            ['‚≠ê –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞', 'üåÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ'],
            ['üíº –î–ª—è —Ä–∞–±–æ—Ç—ã', '‚ù§Ô∏è –î–ª—è –¥—É—à–∏'],
            ['üåç –î–ª—è –∂–∏–∑–Ω–∏', 'üèÜ –î–ª—è —Å–ø–æ—Ä—Ç–∞']
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# –ö–æ–º–∞–Ω–¥—ã
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏ ü§ñ\n"
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏:\n"
        "/random - —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞\n"
        "/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ ‚¨áÔ∏è"
    )
    update.message.reply_text(text, reply_markup=get_keyboard())

def send_random_quote(update: Update, context: CallbackContext):
    quotes = load_quotes()
    all_quotes = [quote for category in quotes.values() for quote in category]
    quote = random.choice(all_quotes)
    update.message.reply_text(f"‚≠êÔ∏è –í–∞—à–∞ —Ü–∏—Ç–∞—Ç–∞:\n\n{quote}")

def send_quote_by_category(update: Update, context: CallbackContext, category: str):
    quotes = load_quotes()
    if category in quotes:
        quote = random.choice(quotes[category])
        update.message.reply_text(f"üìå {category.capitalize()}:\n\n{quote}")
    else:
        update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

def daily_quote(context: CallbackContext):
    job = context.job
    quotes = load_quotes()
    all_quotes = [quote for category in quotes.values() for quote in category]
    quote = random.choice(all_quotes)
    context.bot.send_message(job.context, text=f"üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞—à–∞ –¥–æ–∑–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏:\n\n{quote}")

def subscribe(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
    current_jobs = context.job_queue.get_jobs_by_name(str(chat_id))
    for job in current_jobs:
        job.schedule_removal()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    context.job_queue.run_daily(
        daily_quote,
        time=time(hour=7, minute=30, tzinfo=pytz.timezone('Europe/Moscow')),
        days=(0, 1, 2, 3, 4, 5, 6),
        context=chat_id,
        name=str(chat_id)
    )
    update.message.reply_text(
        "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã!\n"
        "–ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏—Ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:30 —É—Ç—Ä–∞ –ø–æ –ú–æ—Å–∫–≤–µ."
    )

def unsubscribe(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    current_jobs = context.job_queue.get_jobs_by_name(str(chat_id))
    if not current_jobs:
        update.message.reply_text("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
        return
    
    for job in current_jobs:
        job.schedule_removal()
    update.message.reply_text("üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ü–∏—Ç–∞—Ç")

def button_handler(update: Update, context: CallbackContext):
    text = update.message.text
    if text == '‚≠ê –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞':
        send_random_quote(update, context)
    elif text == 'üåÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ':
        subscribe(update, context)
    elif text == 'üíº –î–ª—è —Ä–∞–±–æ—Ç—ã':
        send_quote_by_category(update, context, 'work')
    elif text == '‚ù§Ô∏è –î–ª—è –¥—É—à–∏':
        send_quote_by_category(update, context, 'soul')
    elif text == 'üåç –î–ª—è –∂–∏–∑–Ω–∏':
        send_quote_by_category(update, context, 'life')
    elif text == 'üèÜ –î–ª—è —Å–ø–æ—Ä—Ç–∞':
        send_quote_by_category(update, context, 'sport')

def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("random", send_random_quote))
    dp.add_handler(CommandHandler("subscribe", subscribe))
    dp.add_handler(CommandHandler("unsubscribe", unsubscribe))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    dp.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))

    updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.idle()

if __name__ == '__main__':
    main()
